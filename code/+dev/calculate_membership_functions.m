function calculate_membership_functions(app)

app.Signals.Points = linspace(app.Signals.LeftLimit, app.Signals.RightLimit, 10000);
SignalsArray = [app.Signals.S1.CurrentValue app.Signals.S2.CurrentValue ...
                app.Signals.S3.CurrentValue app.Signals.S4.CurrentValue ...
                app.Signals.S5.CurrentValue app.Signals.S6.CurrentValue];

switch app.MembershipFunction.Type
    case 'Gaussian'
        app.MembershipFunction.PCell = arrayfun(@(x,y) [y x], ...
            SignalsArray, ...
            repmat(app.MembershipFunction.P1, 1, 6), ...
            'UniformOutput', false);
        [app.MembershipFunction.S1, ...
         app.MembershipFunction.S2, ...
         app.MembershipFunction.S3, ...
         app.MembershipFunction.S4, ...
         app.MembershipFunction.S5, ...
         app.MembershipFunction.S6] = create_mf(app.Signals.Points, ...
            app.MembershipFunction.PCell, ...
            'Gaussian');
    case 'Generalized bell-shaped'
        app.MembershipFunction.PCell = arrayfun(@(x,y,z) [y z x], ...
            SignalsArray, ...
            repmat(app.MembershipFunction.P1, 1, 6), ...
            repmat(app.MembershipFunction.P2, 1, 6), ...
            'UniformOutput', false);
        [app.MembershipFunction.S1, ...
         app.MembershipFunction.S2, ...
         app.MembershipFunction.S3, ...
         app.MembershipFunction.S4, ...
         app.MembershipFunction.S5, ...
         app.MembershipFunction.S6] = create_mf(app.Signals.Points, ...
            app.MembershipFunction.PCell, ...
            'Generalized bell-shaped');
    case 'Triangular'
        app.MembershipFunction.PCell = arrayfun(@(x,y) [x-y x x+y], ...
            SignalsArray, ...
            repmat(app.MembershipFunction.P1, 1, 6), ...
            'UniformOutput', false);
        [app.MembershipFunction.S1, ...
         app.MembershipFunction.S2, ...
         app.MembershipFunction.S3, ...
         app.MembershipFunction.S4, ...
         app.MembershipFunction.S5, ...
         app.MembershipFunction.S6] = create_mf(app.Signals.Points, ...
            app.MembershipFunction.PCell, ...
            'Triangular');
    case 'Pi-shaped'
        app.MembershipFunction.PCell = arrayfun(@(x,y,z,w) [x-y x-z x+w x+y], ...
            SignalsArray, ...
            repmat(app.MembershipFunction.P1, 1, 6), ...
            repmat(app.MembershipFunction.P2, 1, 6), ...
            repmat(app.MembershipFunction.P3, 1, 6), ...
            'UniformOutput', false);
        [app.MembershipFunction.S1, ...
         app.MembershipFunction.S2, ...
         app.MembershipFunction.S3, ...
         app.MembershipFunction.S4, ...
         app.MembershipFunction.S5, ...
         app.MembershipFunction.S6] = create_mf(app.Signals.Points, ...
            app.MembershipFunction.PCell, ...
            'Pi-shaped');
    case 'Trapezoidal'
        app.MembershipFunction.PCell = arrayfun(@(x,y,z,w) [x-y x-z x+w x+y], ...
            SignalsArray, ...
            repmat(app.MembershipFunction.P1, 1, 6), ...
            repmat(app.MembershipFunction.P2, 1, 6), ...
            repmat(app.MembershipFunction.P3, 1, 6), ...
            'UniformOutput', false);
        [app.MembershipFunction.S1, ...
         app.MembershipFunction.S2, ...
         app.MembershipFunction.S3, ...
         app.MembershipFunction.S4, ...
         app.MembershipFunction.S5, ...
         app.MembershipFunction.S6] = create_mf(app.Signals.Points, ...
            app.MembershipFunction.PCell, ...
            'Trapezoidal');
end
end

function [MF1, MF2, MF3, MF4, MF5, MF6] = create_mf(Points, Parameters, Type)
switch Type
    case 'Gaussian'
        MF1 = gaussmf(Points, Parameters{1});
        MF2 = gaussmf(Points, Parameters{2});
        MF3 = gaussmf(Points, Parameters{3});
        MF4 = gaussmf(Points, Parameters{4});
        MF5 = gaussmf(Points, Parameters{5});
        MF6 = gaussmf(Points, Parameters{6});
    case 'Generalized bell-shaped'
        MF1 = gbellmf(Points, Parameters{1});
        MF2 = gbellmf(Points, Parameters{2});
        MF3 = gbellmf(Points, Parameters{3});
        MF4 = gbellmf(Points, Parameters{4});
        MF5 = gbellmf(Points, Parameters{5});
        MF6 = gbellmf(Points, Parameters{6});
    case 'Triangular'
        MF1 = trimf(Points, Parameters{1});
        MF2 = trimf(Points, Parameters{2});
        MF3 = trimf(Points, Parameters{3});
        MF4 = trimf(Points, Parameters{4});
        MF5 = trimf(Points, Parameters{5});
        MF6 = trimf(Points, Parameters{6});
    case 'Pi-shaped'
        MF1 = pimf(Points, Parameters{1});
        MF2 = pimf(Points, Parameters{2});
        MF3 = pimf(Points, Parameters{3});
        MF4 = pimf(Points, Parameters{4});
        MF5 = pimf(Points, Parameters{5});
        MF6 = pimf(Points, Parameters{6});
    case 'Trapezoidal'
        MF1 = trapmf(Points, Parameters{1});
        MF2 = trapmf(Points, Parameters{2});
        MF3 = trapmf(Points, Parameters{3});
        MF4 = trapmf(Points, Parameters{4});
        MF5 = trapmf(Points, Parameters{5});
        MF6 = trapmf(Points, Parameters{6});
end
end